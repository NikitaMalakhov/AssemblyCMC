COMMENT ~

 СТУДЕНТ _________     группа _______
 САМОСТОЯТЕЛЬНАЯ РАБОТА 17 (в машинном классе)

 ЗАДАЧА_1 (максимально 20 очков)
 
 Описать процедуру Shift_Left(Q,K) со стандартными соглашениями о связях stdcall. 
 Здесь Q – учетверённое слово, K – байт б/зн из диапазона [0..63]. 
 Параметр Q передаётся по ссылке. Параметр K передаётся по значению. 
 Процедура реализует линейный сдвиг учетверённого слова Q на K разрядов ВЛЕВО.
 
 Применить эту процедуру к переменным X и N, описание которых приведено ниже
 в секции данных (значение переменной Х - зафиксировано при описании, 
 значение байта N нужно предварительно ввести с клавиатуры, ввод корректный). 
 Вывести в двоичном виде (по макрокоманде outnumln) новое значение переменной Х,
 полученное после сдвига исходного значения этой переменной X на К позиций ВЛЕВО
 (вывод нужно осуществлять из основной программы, а не из процедуры!). 

~

include console.inc
.data
T   db " ФАМИЛИЯ______ ИМЯ______   Задача_1  (с-р 17)",0		

X   dq 18446744073709551615  ;  или 11110101110010001010011100010011b 4123567891  18446744073709551615
                        ;   11110101110010001010011100010011b
                   ; (в двоичной записи числа 32 значащих цифры)
                   ; (использовать для тестирования это значение!)
N   db ?  ; N принадлежит диапазону [0..63] (вводится корректно с клавиатуры)

.code
; procedure Shift_Left(var Q: qword; K: byte);
; ДЕЙСТВИЕ: Q := Q shl K  (K = 0,1,...,63)
Shift_Left proc
; [EBP+8]  ~ написать что здесь лежит !!! ---- Q
; [EBP+12] ~ написать что здесь лежит !!! ---- K

; пролог (стандартные входные действия):
    push EBP
    mov EBP, ESP
    push EAX
    push EBX
    push ECX
    push EDX
    push EDI
; решение задачи (кратко комментировать каждую строчку решения!):
    mov EAX, [EBP+8] ; address of X
    mov ECX, [EBP+12] ; N
    mov ESI, 0
    mov EDI, dword ptr [EAX]
    mov ESI, dword ptr [EAX + 4]



    mov ECX, EBX

@L:
    shl EDI, 1
    mov EDX, 0 ; save carry flag
    adc EDX, 0 ; save carry flag | store on EDX
    shl ESI, 1
    add ESI, EDX ; shift high digits and add moved bit

    dec ECX
    cmp ECX, 0
    
    jNE @L

    mov [EAX], EDI
    mov [EAX+4], ESI

; эпилог (стандартные выходные действия):
    pop EDI
    pop EDX
    pop ECX
    pop EBX
    pop EAX

    pop EBP

    ret
Shift_Left endp

Start:
    ConsoleTitle offset T	
; вывод исходного значения X в двоичном виде (для удобства тестирования):    
    outnumln X,,b               
    
    inint N,'N = '              ; запрос значения N из диапазона [0..63]

    movzx EDI, N
    push EDI
    push offset X
; применение процедуры Shift_Left к переменным X и N: Shift_Left(X,N)
    call Shift_Left

; вывод преобразованного значения X в двоичном виде (для контроля ответа):
    outnumln X,,b
             
;   pause						; нужно ТОЛЬКО при сдаче по e-mail
    exit						
end Start

==============================================================================
проверяющий тестирует вашу программу на своих тестах
==============================================================================


; 10010010011111111010000110101010000011100101010000011101b
; 10010010011111111010000110101010000011100101010000011101